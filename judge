#!/bin/bash

######## Default Config ########

CC='gcc'
CFLAGS='-lm -O2 -Wall -fdiagnostics-color=always'

CXX='g++'
CXXFLAGS='-std=c++17 -O2 -Wall -fdiagnostics-color=always'

JAVA='java'
JAVAC='javac'
JFLAGS='-Xlint:all'
JRUN=''

PY='python'
PYFLAGS='-m py_compile'
PYRUN=''

indent='    '

get_test_dir() {
	local src_file="${1}"
	echo "_$(tr '[:upper:]' '[:lower:]' <<< "${src_file%.*}")"
}

######## Utility Functions ########

# Output a message to standard error, with optional indentation and coloring.
log() {
	local message="${1}"
	local num_indents="${2:0}"
	local tput_letter="${3}"

	if [ "${tput_letter}" ]; then
		local tp_var="tp_${tput_letter}"
		local prefix="${!tp_var}"
		local suffix="${tp_n}"
	else
		local prefix=''
		local suffix=''
	fi

	local i
	for (( i = num_indents; i > 0; i-- )); do
		>&2 echo -n "${indent}"
	done

	>&2 echo "${prefix}${message}${suffix}"
}

die() {
	log "${1}" 0 r
	exit 1
}

die_usage() {
	log "${1}" 0 r
	log "Try 'judge --help' for more information"
	exit 1
}

# Display a file if it is not empty.
show_file() {
	local file="${1}"
	local description="${2}"
	local num_indents="${3}"
	local to_stdout="${4:0}"
	local caption="${5}"

	[ -s "${file}" ] || return

	log "${2} (${tp_s}${file}${tp_n}):" "${num_indents}"

	[ "${caption}" ] && log "${caption}" "$(( num_indents + 1 ))" s

	if (( to_stdout )); then
		cat "${file}"
	else
		local indents=""
		local i
		for (( i = 0; i < num_indents + 1; i++ )); do
			indents+="${indent}"
		done

		# HACK: The colored diff output sometimes contains ANSI escape sequences
		# after the final \n, so s/^/${indents}/ results in incorrect indentation.
		>&2 sed -Ez -e 's/\t/        /g' -e "s/[^\n]*\n/${indents}&/g" < "${file}"
	fi
}

# Format an array representing a command and its arguments.
format_cmd() {
	declare -n array="${1}"
	(( ${#array[@]} > 0 )) && printf '%q' "${array[0]}"
	(( ${#array[@]} > 1 )) && printf ' %q' "${array[@]:1}"
	echo
}

describe_delimiter() {
	local delimiter="${1}"

	case "${delimiter}" in
		'')
			echo 'a blank line.'
			;;
		$'\n')
			echo 'EOF (Control+D).'
			;;
		*)
			echo 'the following line:'
			echo "${delimiter}"
			;;
	esac
}

# Read a file from standard input, terminated by a delimiter. If the delimiter is a newline
# character (\n), read until the end of input. Return zero if at least one line was read.
read_file() {
	local file="${1}"
	local delimiter="${2}"
	local description="${3}"
	local num_indents="${4}"

	log "${description} (${tp_s}${file}${tp_n}):" "${num_indents}"

	local msg='Enter each line of data. When you are done, enter '
	msg+="$(describe_delimiter "${delimiter}")"
	log "${msg}" "${num_indents}" s

	local num_lines=0
	local line
	while IFS= read -r line; do
		[ "${line}" == "${delimiter}" ] && break
		echo "${line}" >> "${file}"
		(( num_lines++ ))
	done

	(( num_lines > 0 ))
}

heading() {
	log "${1}:" 0 b
}

enable_color() {
	tp_n="$(tput sgr0)"
	tp_b="$(tput bold)"
	tp_r="$(tput setaf 1)"
	tp_g="$(tput setaf 2)"
	tp_y="$(tput setaf 3)"
	tp_s="$(tput setaf 8)"
}

######## Judge Functions ########

# List basenames of files in a directory.
find_files() {
	local dir="${1}"
	shift

	find "${dir}" -maxdepth 1 -type f "$@" -printf '%f\n'
}

# List test files in the order they should be run.
list_test_files() {
	local dir="${1}"

	find_files "${dir}" -name '[0-9]*.in' | sort -g
	find_files "${dir}" -name '[^0-9_]*.in' | sort
	find_files "${dir}" -name '_*.in' | sort
}

get_compile_cmd() {
	local src_file="${1}"

	case "${src_file}" in
		*.c)
			compile_cmd=(${CC} ${CFLAGS} "${src_file}" -o "${src_file%.*}")
			;;
		*.cc|*.cpp|*.cxx)
			compile_cmd=(${CXX} ${CXXFLAGS} "${src_file}" -o "${src_file%.*}")
			;;
		*.java)
			compile_cmd=(${JAVAC} ${JFLAGS} "${src_file}")
			;;
		*.py)
			compile_cmd=(${PY} ${PYFLAGS} "${src_file}")
			;;
		*)
			return 1
			;;
	esac
}

get_run_cmd() {
	local src_file="${1}"

	case "${src_file}" in
		*.c|*.cc|*.cpp|*.cxx)
			run_cmd=("./${src_file%.*}")
			;;
		*.java)
			run_cmd=(${JAVA} ${JRUN} "${src_file%.java}")
			;;
		*.py)
			run_cmd=(${PY} ${PYRUN} "${src_file}")
			;;
		*)
			return 1
			;;
	esac
}

make_tests() {
	local test_dir="${1}"

	heading 'Populating test directory'

	mkdir -p "${test_dir}"

	log \
'Enter the delimiter you will use to separate the test inputs and expected
outputs from each other. When this delimiter appears on a line of its own, it
indicates the end of the current file, so you should choose a delimiter that
does not appear in the test inputs or the expected outputs. To stop making
tests, enter the delimiter as the first line of a file. To use a blank line as
a delimiter, simply press Enter.' 0 s
	log "Delimiter:" 0
	local delimiter
	IFS= read -r delimiter

	log "Delimiter is $(describe_delimiter "${delimiter}")" 0 s

	local tests_made=0
	local test_num
	for (( test_num = 1; ; test_num++ )); do
		local test_base="${test_dir}/${test_num}"
		local test_in="${test_base}.in"
		local test_out="${test_base}.out"

		if [ -f "${test_in}" ] || [ -f "${test_out}" ]; then
			log "Test ${test_num} already exists." 1 s
			continue
		fi

		if ! read_file "${test_in}" "${delimiter}" "Test ${test_num} input" 1; then
			log "No test input entered. Test creation canceled." 1 s
			break
		fi
		if ! read_file "${test_out}" "${delimiter}" "Test ${test_num} expected output" 1; then
			log "No expected output entered. This test is incomplete." 1 y
			break
		fi
		(( tests_made++ ))
	done

	log "Made ${tests_made} test(s)." 1
}

test_stdin() {
	local tmp_dir="${1}"

	heading 'Reading test input'

	if read_file "${tmp_dir}/_judge_stdin.in" $'\n' 'Test input' 1; then
		log 'Made test input from stdin.' 1 s
	else
		log 'No test input entered. Test creation canceled.' 1 y
	fi
}

copy_test() {
	local test_file="${1}"
	local tmp_dir="${2}"

	local test_in="${test_file%.*}.in"
	local test_out="${test_file%.*}.out"

	case "${test_file}" in
		*.in)
			if [ -f "${test_out}" ]; then
				cp "${test_in}" "${test_out}" "${tmp_dir}"
				return 0
			else
				log "Ignoring test input '${test_in}': expected output '${test_out}' is missing." 1 y
			fi
			;;

		*.out)
			[ -f "${test_in}" ] || log "Ignoring expected output '${test_out}': test input '${test_in}' is missing." 1 y
			;;
		*)
			log "Ignoring unknown file '${test_file}' in test directory." 1 y
			;;
	esac

	return 1
}

copy_tests() {
	local test_dir="${1}"
	local tmp_dir="${2}"

	heading 'Loading tests'

	local num_loaded=0
	local test_file
	while read -r test_file; do
		copy_test "${test_file}" "${tmp_dir}" && (( num_loaded++ ))
	done < <(find "${test_dir}" -maxdepth 1 -type f)

	log "Loaded ${num_loaded} test(s)." 1 s
}

compile() {
	local src_file="${1}"

	local compile_out="_compile.out"
	local compile_err="_compile.err"

	heading 'Compiling'

	local compile_status
	if get_compile_cmd "${src_file}"; then
		log "$(format_cmd compile_cmd)" 1 s

		"${compile_cmd[@]}" > "${compile_out}" 2> "${compile_err}"
		compile_status="$?"

		(( compile_status )) && log "Exit status ${compile_status}." 1 r

		show_file "${compile_out}" 'Standard output' 1
		show_file "${compile_err}" 'Standard error' 1
	else
		log "Cannot compile '${src_file}': language not supported." 1 r
		compile_status=1
	fi

	(( compile_status )) && log "Compilation failed." 1 r
	return "${compile_status}"
}

run_tests() {
	local src_file="${1}"

	heading 'Running tests'

	if ! get_run_cmd "${src_file}"; then
		log "Cannot run '${src_file}': language not supported." 1 r
		return 1
	else
		log "$(format_cmd run_cmd)" 1 s
	fi

	(( use_builtin_time )) && log "To show memory usage, install GNU time." 1 s

	local test_in
	while read -r test_in; do
		run "${test_in}"
	done < <(list_test_files .)
}

run() {
	local test_in="$(basename "${1}")"

	local test_name="${test_in%.in}"

	local test_my="${test_name}.my"
	local test_err="${test_name}.err"
	local test_time="${test_name}.time"

	>&2 echo -n "${indent}Test ${test_name}: "

	if (( use_builtin_time )); then
		local TIMEFORMAT='%R'
		{
			time "${run_cmd[@]}" < "${test_in}" > "${test_my}" 2> "${test_err}"
		} 2> "${test_time}"
	else
		command time -o "${test_time}" -q -f '%e %M' \
			"${run_cmd[@]}" < "${test_in}" > "${test_my}" 2> "${test_err}"
	fi
	local run_status="$?"

	local run_stats
	if (( use_builtin_time )); then
		run_stats="$(<"${test_time}") s"
	else
		local run_sec run_kb
		read -r run_sec run_kb < "${test_time}"
		run_stats="${run_sec} s, $(bc <<< "scale=1; ${run_kb} / 1024") MiB"
	fi

	local test_out="${test_name}.out"
	if [ -f "${test_out}" ]; then
		local diff_width=$(( $(wc -L < "${test_my}") + $(wc -L < "${test_out}") + 16 ))
		local test_diff="${test_name}.diff"
		diff --color=always --side-by-side --width=${diff_width} --expand-tabs \
			"${test_my}" "${test_out}" > "${test_diff}"
		local diff_status="$?"
	else
		local diff_status=2
	fi

	local test_verdict
	case "${diff_status}" in
		0)
			test_verdict="${tp_g}passed"
			;;
		1)
			test_verdict="${tp_r}failed"
			;;
		2)
			test_verdict="${tp_s}unknown"
			;;
	esac

	log "${test_verdict}${tp_n} (${run_stats})." 0

	(( run_status )) && log "Exit status ${run_status}." 2 r

	case "${diff_status}" in
		1)
			show_file "${test_in}" "Test input" 2
			show_file "${test_diff}" 'Program output and expected output' 2 0 \
				"diff $(printf '%q' "${test_my}") $(printf '%q' "${test_out}")"
			;;
		2)
			show_file "${test_my}" "Program output" 2 1
			;;
	esac

	show_file "${test_err}" "Standard error" 2

	return "${diff_status}"
}

usage() {
	cat << EOF
Usage: judge [OPTION]... SOURCE_FILE
Compile source code, run it with test inputs, and compare the results to the
expected outputs.

-h, --help		Show this help message.

-i, --test-stdin	Read a test input from stdin and print the compiled
			program's output to stdout, unless there is nothing to
			read. If there is no test directory for this source file
			and neither -t nor -T are specified, this option is
			implied. If stdin is not a terminal, this option is also
			implied.

-T, --make-more-tests	Create the test directory for this source file, then
			read from stdin to populate the directory with test
			inputs and expected outputs. If the -t and -i options
			are both given, the input for -t will be read before the
			input for -i. If the test directory already exists, make
			more tests.

-t, --make-tests	Same as -T, but do nothing if the test directory already
			exists.

    --version		Show version and license information.
EOF
}

version() {
	cat << EOF
local-cp-judge 0.2.4

Copyright (C) 2021 Justin Yao Du.
Licensed under the MIT License.

GitHub: https://github.com/justinyaodu/local-cp-judge
EOF
}

main() {
	enable_color

	# Determine whether standard input is coming from a terminal.
	[ ! -t 0 ]
	interactive="$?"

	# Determine whether the standalone time utility is available. If it isn't, use the Bash builtin.
	command -v time &> /dev/null
	use_builtin_time="$?"

	test_stdin=0
	make_tests=0

	local orig_src_file=""

	while (( $# )); do
		local arg="${1}"
		shift
		case "${arg}" in
			-h|--help)
				usage
				exit
				;;
			-i|--test-stdin)
				test_stdin=1
				continue
				;;
			-t|--make-tests)
				make_tests=1
				continue
				;;
			-T|--make-more-tests)
				make_tests=2
				continue
				;;
			--version)
				version
				exit
				;;
			-*)
				die_usage "Unrecognized option '${arg}'."
				;;
			*)
				orig_src_file="${arg}"
				(( $# )) && die_usage "Trailing argument(s): '$@'."
				break
				;;
		esac
	done

	[ "${orig_src_file}" ] || die_usage "No source code file specified."
	[ -f "${orig_src_file}" ] || die "File does not exist: '${orig_src_file}'."

	local orig_dir="$(dirname "${orig_src_file}")"
	local src_file="$(basename "${orig_src_file}")"

	heading 'Initializing'

	local judgerc="${orig_dir}/.judgerc"
	if [ -f "${judgerc}" ]; then
		source "${judgerc}"
		log "Sourced '${judgerc}'." 1 s
	fi

	local test_dir="${orig_dir}/$(get_test_dir "${src_file}")"
	test_dir="${test_dir#./}"

	if (( !interactive && !test_stdin && !make_tests )); then
		log 'None of the options -itT were given, and stdin is not a terminal. Option -i implied.' 1 y
		test_stdin=2
	fi

	case "${make_tests}" in
		1)
			if [ -d "${test_dir}" ]; then
				log "Option -t ignored, since test directory '${test_dir}' already exists. Use -T to make more tests." 1 y
			else
				make_tests "${test_dir}"
			fi
			;;
		2)
			make_tests "${test_dir}"
			;;
	esac

	local tmp_dir="$(mktemp --tmpdir -d "judge-$(date +'%Y-%m-%d-%H-%M-%S')-XXXXXXXXXX")"
	log "Using temporary directory '${tmp_dir}'." 1 s

	if [ -d "${test_dir}" ]; then
		copy_tests "${test_dir}" "${tmp_dir}"
	elif (( !test_stdin )); then
		log "Test directory '${test_dir}' does not exist. Option -i implied." 1 s
		test_stdin=2
	fi

	(( test_stdin )) && test_stdin "${tmp_dir}"

	cp "${orig_src_file}" "${tmp_dir}"

	pushd "${tmp_dir}" &> /dev/null

	compile "${src_file}" || return
	run_tests "${src_file}"
}

main "$@"
